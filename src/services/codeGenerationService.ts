import { supabase } from '@/integrations/supabase/client';

export interface GeneratedApp {
  html: string;
  css: string;
  javascript: string;
  description: string;
  features: string[];
}

export interface GenerateWebAppOptions {
  prompt: string;
  model: string;
  chatId: string;
  fallbackModels?: string[];
}

export interface GenerateWebAppResult {
  app: GeneratedApp;
  usedModel: string;
  rawResponse: string;
}

export const DEFAULT_CODE_GENERATION_FALLBACK_ORDER: string[] = [
  'gemini-2.5-pro',
  'gemini',
  'groq-llama4-maverick',
  'groq-llama4-scout',
  'groq-llama31-8b-instant',
];

const FALLBACK_APP: GeneratedApp = {
  html: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Web App</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Generated Web Application</h1>
        <div class="content">This application was generated by the AI assistant.</div>
    </div>
    <script src="script.js"></script>
</body>
</html>`,
  css: `body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f5f5f5;
}
.container {
    max-width: 800px;
    margin: 0 auto;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}
.content {
    margin-top: 20px;
    line-height: 1.6;
}`,
  javascript: "console.log('Web app generated successfully');",
  description: 'AI-generated web application',
  features: ['Responsive design', 'Modern styling', 'Basic functionality'],
};

const buildGenerationPrompt = (description: string): string => {
  return `Generate a complete web application based on this description: ${description}.

Please return ONLY a valid JSON object with this exact structure:
{
  "html": "complete HTML content",
  "css": "complete CSS styles",
  "javascript": "complete JavaScript code",
  "description": "brief description of the app",
  "features": ["feature 1", "feature 2", "feature 3"]
}

Make it responsive, modern, and fully functional. Do not include any markdown formatting or code blocks. Just the raw JSON.`;
};

const parseGeneratedApp = (responseText: string): GeneratedApp => {
  const cleanResponse = responseText.replace(/```json\n?|```\n?/g, '').trim();

  try {
    const parsed = JSON.parse(cleanResponse);
    const features = Array.isArray(parsed.features)
      ? parsed.features.map((item: unknown) => String(item))
      : FALLBACK_APP.features;

    return {
      html: typeof parsed.html === 'string' ? parsed.html : FALLBACK_APP.html,
      css: typeof parsed.css === 'string' ? parsed.css : FALLBACK_APP.css,
      javascript: typeof parsed.javascript === 'string' ? parsed.javascript : FALLBACK_APP.javascript,
      description: typeof parsed.description === 'string' ? parsed.description : FALLBACK_APP.description,
      features,
    };
  } catch (error) {
    const sanitizedText = responseText.replace(/\n/g, '<br>');
    return {
      ...FALLBACK_APP,
      html: FALLBACK_APP.html.replace(
        '<div class="content">This application was generated by the AI assistant.</div>',
        `<div class="content">${sanitizedText}</div>`
      ),
    };
  }
};

const invokeGeneration = async (prompt: string, model: string, chatId: string) => {
  const { data, error } = await supabase.functions.invoke('ai-search-assistant', {
    body: {
      query: buildGenerationPrompt(prompt),
      model,
      chatId,
      chatHistory: [],
    },
  });

  if (error) {
    throw new Error(error.message);
  }

  return data?.response || '';
};

export const generateWebApp = async ({
  prompt,
  model,
  chatId,
  fallbackModels = DEFAULT_CODE_GENERATION_FALLBACK_ORDER,
}: GenerateWebAppOptions): Promise<GenerateWebAppResult> => {
  const modelsToTry = [model, ...fallbackModels.filter((fallback) => fallback !== model)];
  let lastError: Error | null = null;

  for (const currentModel of modelsToTry) {
    try {
      const rawResponse = await invokeGeneration(prompt, currentModel, chatId);
      const app = parseGeneratedApp(rawResponse || '');
      return {
        app,
        usedModel: currentModel,
        rawResponse,
      };
    } catch (error) {
      lastError = error instanceof Error ? error : new Error('Unknown error generating web app');
    }
  }

  throw lastError || new Error('Failed to generate web app with the available models');
};

