import { GeneratedApp } from '@/services/codeGenerationService';

type FileSystemTree = import('@webcontainer/api').FileSystemTree;

export const NODE_WORKSPACE_DIR = '/workspace';
export const PYTHON_PREVIEW_FILE = '/workspace/prism_preview.html';

export interface FileEntry {
  path: string;
  content: string;
}

export const buildFileEntries = (app: GeneratedApp): FileEntry[] => {
  const entries = new Map<string, string>();

  (app.files || []).forEach((file) => {
    if (!file.path) return;
    entries.set(file.path, file.content ?? '');
  });

  if (app.html && app.html.trim().length > 0 && !entries.has('index.html')) {
    entries.set('index.html', app.html);
  }

  if (app.css && app.css.trim().length > 0 && !entries.has('styles.css')) {
    entries.set('styles.css', app.css);
  }

  if (app.javascript && app.javascript.trim().length > 0 && !entries.has('script.js')) {
    entries.set('script.js', app.javascript);
  }

  if (!entries.has('README.md')) {
    const stackLines: string[] = [];
    if (app.stack?.language) stackLines.push(`- Language: ${app.stack.language}`);
    if (app.stack?.framework) stackLines.push(`- Framework: ${app.stack.framework}`);
    if (app.stack?.libraries?.length) stackLines.push(`- Libraries: ${app.stack.libraries.join(', ')}`);
    if (app.stack?.tooling?.length) stackLines.push(`- Tooling: ${app.stack.tooling.join(', ')}`);

    const details = stackLines.length > 0 ? `\n${stackLines.join('\n')}` : '';
    const features = (app.features || []).map((feature) => `- ${feature}`).join('\n');

    entries.set(
      'README.md',
      `# Prism Agent build\n\n${app.description || 'Generated by Prism Agent.'}\n\n## Stack${details}\n\n## Features\n${
        features || '- Generated feature overview'
      }\n`
    );
  }

  return Array.from(entries.entries()).map(([path, content]) => ({ path, content }));
};

export const buildFileTree = (files: FileEntry[]): FileSystemTree => {
  const tree: FileSystemTree = {};

  files.forEach(({ path, content }) => {
    if (!path) return;
    const cleanPath = path.replace(/^\/+/, '');
    const segments = cleanPath.split('/');
    let current: FileSystemTree = tree;

    segments.forEach((segment, index) => {
      if (!segment) return;

      if (index === segments.length - 1) {
        current[segment] = { file: { contents: content } };
        return;
      }

      if (!current[segment]) {
        current[segment] = { directory: {} };
      }

      current = (current[segment] as { directory: FileSystemTree }).directory;
    });
  });

  return tree;
};

export const inferRuntimeKind = (app?: GeneratedApp): 'node' | 'python' => {
  const language = app?.stack?.language?.toLowerCase() || '';
  if (language.includes('python')) {
    return 'python';
  }
  if (language.includes('node') || language.includes('typescript') || language.includes('javascript')) {
    return 'node';
  }
  if (app?.stack?.framework) {
    const framework = app.stack.framework.toLowerCase();
    if (framework.includes('django') || framework.includes('flask') || framework.includes('fastapi')) {
      return 'python';
    }
    if (framework.includes('next') || framework.includes('react') || framework.includes('svelte')) {
      return 'node';
    }
  }

  return 'node';
};
