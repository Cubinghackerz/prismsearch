import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Globe, Code, Download, Sparkles, FolderOpen, Save, History, Terminal, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useDailyQueryLimit } from '@/hooks/useDailyQueryLimit';
import { supabase } from '@/integrations/supabase/client';
import WebAppPreview from './WebAppPreview';
import AdvancedCodeEditor from './AdvancedCodeEditor';
import FrameworkTemplates from './FrameworkTemplates';
import ProjectCloudStorage from './ProjectCloudStorage';
import ProjectHistory from './ProjectHistory';

interface GeneratedApp {
  html: string;
  css: string;
  javascript: string;
  description: string;
  features: string[];
}

interface ProjectData {
  id: string;
  name: string;
  files: { [key: string]: string };
  packages: Array<{
    name: string;
    version: string;
    type: 'dependency' | 'devDependency';
  }>;
  description: string;
  features: string[];
}

const initialGeneratedApp: GeneratedApp = {
  html: '<!DOCTYPE html>\n<html lang="en">\n<head>\n <meta charset="UTF-8">\n <meta name="viewport" content="width=device-width, initial-scale=1.0">\n <title>Generated App</title>\n</head>\n<body>\n <h1>Hello, World!</h1>\n <p>This is a generated web application.</p>\n</body>\n</html>',
  css: 'body {\n font-family: Arial, sans-serif;\n margin: 20px;\n}',
  javascript: 'console.log("Hello from the generated app!");',
  description: 'A basic web application generated by AI',
  features: ['Basic HTML structure', 'Simple CSS styling', 'JavaScript console log']
};

const WebAppGenerator = () => {
  const [prompt, setPrompt] = useState<string>('A simple webpage with a heading and a paragraph.');
  const [generatedApp, setGeneratedApp] = useState<GeneratedApp | null>(null);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('preview');
  const { incrementQueryCount } = useDailyQueryLimit();
  const { toast } = useToast();

  const generateWebApp = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/generate-web-app', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      if (data && data.generatedApp) {
        setGeneratedApp(data.generatedApp);
        incrementQueryCount();
      } else {
        console.error('Invalid response from API:', data);
        toast({
          title: "Generation Failed",
          description: "Failed to generate web app. Please try again.",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('Error generating web app:', error);
      toast({
        title: "Generation Error",
        description: "An error occurred while generating the web app.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const downloadProject = () => {
    if (!generatedApp) {
      toast({
        title: "No Project to Download",
        description: "Generate a web app before downloading.",
        variant: "destructive"
      });
      return;
    }

    const zip = new JSZip();
    zip.file("index.html", generatedApp.html);
    zip.file("style.css", generatedApp.css);
    zip.file("script.js", generatedApp.javascript);

    zip.generateAsync({ type: "blob" })
      .then(function(content) {
        const url = URL.createObjectURL(content);
        const a = document.createElement("a");
        a.href = url;
        a.download = "web-app.zip";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      });
  };

  const handleTemplateSelect = (template: any) => {
    setGeneratedApp({
      html: template.files['index.html'] || '',
      css: template.files['styles.css'] || '',
      javascript: template.files['app.js'] || '',
      description: template.description || '',
      features: template.features || []
    });
    toast({
      title: "Template Applied",
      description: `${template.name} template has been loaded successfully.`,
    });
  };

  const handleProjectLoad = (project: ProjectData) => {
    setGeneratedApp({
      html: project.files['index.html'] || '',
      css: project.files['styles.css'] || '',
      javascript: project.files['script.js'] || '',
      description: project.description || '',
      features: project.features || []
    });
    toast({
      title: "Project Loaded",
      description: "Project loaded from cloud storage.",
    });
  };

  const handleLoadProject = (project: any) => {
    setGeneratedApp({
      html: project.generatedApp.html || '',
      css: project.generatedApp.css || '',
      javascript: project.generatedApp.javascript || '',
      description: project.generatedApp.description || '',
      features: project.generatedApp.features || []
    });
    toast({
      title: "Project Loaded",
      description: "Project loaded from history.",
    });
  };

  const projectData = {
    id: 'project-' + Date.now(),
    name: 'Generated Web App',
    files: {
      'index.html': generatedApp?.html || '',
      'style.css': generatedApp?.css || '',
      'script.js': generatedApp?.javascript || ''
    },
    packages: [],
    description: generatedApp?.description || '',
    features: generatedApp?.features || []
  };

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl font-bold">AI Web App Generator</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid gap-4">
            <Textarea
              placeholder="Describe the web application you want to generate..."
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              className="col-span-3"
            />
            <Button onClick={generateWebApp} disabled={loading}>
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4 mr-2" />
                  Generate Web App
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {generatedApp && (
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <div className="flex items-center justify-between mb-4">
            <TabsList className="grid w-full max-w-md grid-cols-5">
              <TabsTrigger value="preview">
                <Globe className="w-4 h-4 mr-2" />
                Preview
              </TabsTrigger>
              <TabsTrigger value="html">HTML</TabsTrigger>
              <TabsTrigger value="css">CSS</TabsTrigger>
              <TabsTrigger value="js">JS</TabsTrigger>
              <TabsTrigger value="files">Files</TabsTrigger>
            </TabsList>

            <div className="flex items-center space-x-2">
              <FrameworkTemplates onTemplateSelect={handleTemplateSelect} />
              <ProjectCloudStorage 
                projectData={projectData} 
                onProjectLoad={handleProjectLoad} 
              />
              <ProjectHistory onLoadProject={handleLoadProject} />
              <Button
                size="sm"
                variant="outline"
                onClick={downloadProject}
              >
                <Download className="w-4 h-4 mr-2" />
                Download
              </Button>
            </div>
          </div>

          <TabsContent value="preview" className="space-y-4">
            <WebAppPreview html={generatedApp.html} css={generatedApp.css} javascript={generatedApp.javascript} />
          </TabsContent>

          <TabsContent value="html" className="space-y-4">
            <AdvancedCodeEditor code={generatedApp.html} language="html" />
          </TabsContent>

          <TabsContent value="css" className="space-y-4">
            <AdvancedCodeEditor code={generatedApp.css} language="css" />
          </TabsContent>

          <TabsContent value="js" className="space-y-4">
            <AdvancedCodeEditor code={generatedApp.javascript} language="javascript" />
          </TabsContent>

          <TabsContent value="files" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Project Files</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Badge variant="secondary">index.html</Badge>
                  <Badge variant="outline">HTML File</Badge>
                </div>
                <div className="flex items-center space-x-2">
                  <Badge variant="secondary">style.css</Badge>
                  <Badge variant="outline">CSS File</Badge>
                </div>
                <div className="flex items-center space-x-2">
                  <Badge variant="secondary">script.js</Badge>
                  <Badge variant="outline">JavaScript File</Badge>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Project Details</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <p>
                  <span className="font-bold">Description:</span> {generatedApp.description}
                </p>
                <div>
                  <span className="font-bold">Features:</span>
                  <div className="flex flex-wrap gap-1 mt-1">
                    {generatedApp.features.map((feature, index) => (
                      <Badge key={index} variant="outline">{feature}</Badge>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      )}
    </div>
  );
};

export default WebAppGenerator;
